### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  id: String!
  name: String!
  stripeId: String!
  user: User!
}

input AccountCreateInput {
  id: String
  name: String!
  stripeId: String!
  user: UserCreateOneWithoutAccountsInput!
}

input AccountCreateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  create: [AccountCreateWithoutUserInput!]
}

input AccountCreateWithoutUserInput {
  id: String
  name: String!
  stripeId: String!
}

input AccountWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Fund {
  group: Group!
  id: String!
  name: String!
}

input FundCreateManyWithoutGroupInput {
  connect: [FundWhereUniqueInput!]
  create: [FundCreateWithoutGroupInput!]
}

input FundCreateWithoutGroupInput {
  id: String
  name: String!
}

input FundWhereUniqueInput {
  id: String
}

type Group {
  funds(after: FundWhereUniqueInput, before: FundWhereUniqueInput, first: Int, last: Int): [Fund!]!
  id: String!
  name: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input GroupCreateInput {
  funds: FundCreateManyWithoutGroupInput
  id: String
  name: String!
  users: UserCreateManyWithoutGroupsInput
}

input GroupCreateManyWithoutUsersInput {
  connect: [GroupWhereUniqueInput!]
  create: [GroupCreateWithoutUsersInput!]
}

input GroupCreateWithoutUsersInput {
  funds: FundCreateManyWithoutGroupInput
  id: String
  name: String!
}

input GroupWhereUniqueInput {
  id: String
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  createOneGroup(data: GroupCreateInput!): Group!
  createOneUser(data: UserCreateInput!): User!
}

type Query {
  ok: Boolean!
  viewer: Viewer
}

type User {
  accounts(after: AccountWhereUniqueInput, before: AccountWhereUniqueInput, first: Int, last: Int): [Account!]!
  groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  id: String!
  name: String!
}

input UserCreateInput {
  accounts: AccountCreateManyWithoutUserInput
  authSubject: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  name: String!
}

input UserCreateManyWithoutGroupsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGroupsInput!]
}

input UserCreateOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateWithoutAccountsInput {
  authSubject: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  name: String!
}

input UserCreateWithoutGroupsInput {
  accounts: AccountCreateManyWithoutUserInput
  authSubject: String!
  id: String
  name: String!
}

input UserWhereUniqueInput {
  authSubject: String
  id: String
}

type Viewer {
  user: User!
}
